(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{177:function(t,e,a){"use strict";a.r(e);var r=a(0),n=Object(r.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),a("p",[t._v("Daruk 只是在 Koa 上做了一定的约定并添加了部分方便的功能，所以不管是开发时以及运行时，都和 Koa 相差无几。也正因为此，这篇文档并不会过多地介绍 Koa 的基础概念，需要读者对 Koa 有一定的了解。Daruk 推荐使用 "),a("a",{attrs:{href:"https://www.tslang.cn/docs/home.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Typescript"),a("OutboundLink")],1),t._v(" 来开发，建议先对 Typescript 稍作了解；另外，也建议了解 Typescript 的"),a("a",{attrs:{href:"https://www.tslang.cn/docs/handbook/decorators.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("装饰器"),a("OutboundLink")],1),t._v("，简单来说，装饰器就是一种特殊的语法，它允许我们对类做修改、在类上保存信息，从而提高代码的抽象性，便于管理依赖。")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),a("p",[t._v("现在你已经可以使用 Daruk 快速搭建一个应用了.")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"快速开始"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速开始","aria-hidden":"true"}},[this._v("#")]),this._v(" 快速开始")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们认为约定目录结构是必要的，约定结构一方面能够统一团队项目结构风格；另一方面，在约定目录结构的基础上，我们能够做自动的 loader 以及初始化，减少模板代码，并且使模块甚至函数级别的性能分析成为可能。另外，装饰器语法能够减少代码量，并能够使代码更加清晰。因此，Daruk 采用了 "),e("code",[this._v("约定目录结构")]),this._v(" + "),e("code",[this._v("装饰器")]),this._v(" 的基调。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"快速使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速使用","aria-hidden":"true"}},[this._v("#")]),this._v(" 快速使用")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用 "),e("code",[this._v("Daruk")]),this._v(" 官方脚手架一键生成项目")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 全局安装daruk脚手架")]),t._v("\ncnpm i -g daruk-cli\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化项目")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --ignore 表示忽略本地模板缓存")]),t._v("\ndaruk init --ignore daruk-example\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行项目")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cd")]),t._v(" daruk-example\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" run dev\n")])])])}],!1,null,null,null);e.default=n.exports}}]);